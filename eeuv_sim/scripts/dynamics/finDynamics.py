#!/usr/bin/python3

"""
Simplified fin dynamic model

@author: Walid Remmas
@contact: walid.remmas@taltech.ee
"""

import rclpy
from rclpy.node import Node

import numpy as np


class FinDynamics():
    """
    Class to compute and simulate the dynamics of paddling fins.
    """

    def __init__(self, dynamics_parameters):
        """
            self:
            dynamics_parameters: dictionary variable containg fin dynamics params
        """
        self.k_thrust = dynamics_parameters["simplified"]["k_thrust"]
        self.k_lateral = dynamics_parameters["simplified"]["k_lateral"]

        self.finMappingDirection =  dynamics_parameters["finMapDirection"]
        self.initialState =  dynamics_parameters["initialState"]
        self.surgeMap = dynamics_parameters["surgeMap"]
        self.swayMap = dynamics_parameters["swayMap"]
        self.heaveMap = dynamics_parameters["heaveMap"]
        self.rollMap = dynamics_parameters["rollMap"]
        self.pitchMap = dynamics_parameters["pitchMap"]
        self.yawMap = dynamics_parameters["yawMap"]

        alpha_mount = dynamics_parameters["fin_mounting_angle"]
        self.alpha_mount_cos = np.cos(np.deg2rad(alpha_mount))
        self.alpha_mount_sin = np.sin(np.deg2rad(alpha_mount))

        self.finMomentArm = dynamics_parameters["finMomentArm"]

        self.FxFins = np.zeros(4)
        self.FyFins = np.zeros(4)
        self.FzFins = np.zeros(4)

        self.TxFins = np.zeros(4)
        self.TyFins = np.zeros(4)
        self.TzFins = np.zeros(4)

    def getWrench(self, finsPosition, finsVelocity, finsAcceleration):
        """
        Function to convert the forces generated by the fins into Forces
        and Torques in body frame
        @param: self
        @result: publishes wrench message of torques.
        """
        position = np.array(finsPosition)
        velocity = np.array(finsVelocity)
        acceleration = np.array(finsAcceleration)

        Facc = self.k_thrust * acceleration**2
        Flateral = self.k_lateral * velocity

        # Convert force vector to fin frame
        horizontalForceFinFrame = Facc * np.cos(position) - Flateral * np.sin(position)
        verticalForceFinFrame = Facc * np.sin(position) + Flateral * np.cos(position)

        # Convert forces vectors in fin frame to body frame
        FxFins = horizontalForceFinFrame * self.alpha_mount_cos * self.surgeMap
        FyFins = horizontalForceFinFrame * self.alpha_mount_sin * self.swayMap
        FzFins = verticalForceFinFrame * self.heaveMap

        # Debug variables
        self.FxFins = FxFins
        self.FyFins = FyFins
        self.FzFins = FzFins

        self.TxFins = self.finMomentArm[0] * verticalForceFinFrame * self.rollMap
        self.TyFins = self.finMomentArm[1] * verticalForceFinFrame * self.pitchMap
        self.TzFins = self.finMomentArm[2] * horizontalForceFinFrame * self.yawMap

        # Sum forces and torques
        forceXBody = sum(FxFins)
        forceYBody = sum(FyFins)
        forceZBody = sum(FzFins)

        torqueX = sum(self.finMomentArm[0] * verticalForceFinFrame * self.rollMap)
        torqueY = sum(self.finMomentArm[1] * verticalForceFinFrame * self.pitchMap)
        torqueZ = sum(self.finMomentArm[2] * horizontalForceFinFrame * self.yawMap)


        wrench = [forceXBody, forceYBody, forceZBody, torqueX, torqueY, torqueZ]

        return wrench
